import os
from rdkit import Chem
from rdkit.Chem import AllChem
import subprocess
import cclib


# ================================================
# 1. Gaussian Input File Generation
# ================================================
def write_gaussian_input(mol, filename, method="B3LYP/6-31G(d)",
                         route_parameters="Opt Freq", nproc=8, mem="16GB"):
    """
    Converts RDKit molecule to Gaussian input file.

    Args:
        mol (Chem.Mol): RDKit molecule with 3D coordinates
        filename (str): Output .gjf file path
        method (str): DFT method/basis set
        route_parameters (str): Gaussian calculation parameters
        nproc (int): CPU cores
        mem (str): Memory allocation
    """
    header = f"""%NProcShared={nproc}
%Mem={mem}
# {method} {route_parameters}

Generated by Pipeline

0 1
"""

    # Get XYZ coordinates
    conf = mol.GetConformer()
    coord_block = ""
    for atom in mol.GetAtoms():
        pos = conf.GetAtomPosition(atom.GetIdx())
        coord_block += f"{atom.GetSymbol():<2} {pos.x:10.5f} {pos.y:10.5f} {pos.z:10.5f}\n"

    with open(filename, "w") as f:
        f.write(header + coord_block + "\n")


# ================================================
# 2. Full Pipeline Integration
# ================================================
def calculate_energy(smiles):
    gaussian_exe = r"E:\G09W\g09.exe"
    try:
        # 生成分子结构
        mol = Chem.MolFromSmiles(smiles)
        mol = Chem.AddHs(mol)
        AllChem.EmbedMolecule(mol)
        AllChem.MMFFOptimizeMolecule(mol, maxIters=500)

        # 写入输入文件
        write_gaussian_input(mol, "input.gjf")

        # 运行 Gaussian（注入环境变量）
        env = os.environ.copy()
        env["GAUSS_EXEDIR"] = r"E:\G09W"
        subprocess.run(
            f'"{gaussian_exe}" input.gjf',
            shell=True,
            check=True,
            env=env,
            capture_output=True,
            text=True
        )

        # 解析结果
        data = cclib.io.ccread("input.log")
        return {
            'energy': data.scfenergies[-1],
            'homo': data.moenergies[0][data.homos[0]],
            'lumo': data.moenergies[0][data.homos[0]+1]
        }
    except Exception as e:
        print(f"Error: {str(e)}")
        return None


# ================================================
# 3. Usage Example
# ================================================
if __name__ == "__main__":
    # Test with aspirin SMILES
    results = calculate_energy("CC(=O)OC1=CC=CC=C1C(=O)O")

    if results:
        print(f"SCF Energy: {results['energy']:.6f} Hartree")
        print(f"HOMO-LUMO Gap: {results['lumo'] - results['homo']:.4f} eV")